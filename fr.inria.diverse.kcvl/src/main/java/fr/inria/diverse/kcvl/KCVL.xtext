grammar fr.inria.diverse.kcvl.KCVL with org.eclipse.xtext.xbase.Xbase

import "platform:/resource/fr.inria.diverse.kcvl.metamodel/model/CVLMetamodel.ecore#//cvl"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

VPackage returns VPackage:
	'VP' name = ID '{'
		(imports += Import)*
		(packageElement += VPackageable)*
	'}'
;

Import returns Import:
	'import' importURI = STRING
;

VPackageable returns VPackageable:
	VPackage | VSpec | VariationPoint | VSpecResolution | Variabletype | Constraint/* | VSpecDerivation | OVPType | VInterface | VConfiguration*/
;

VSpecDerivation returns VSpecDerivation:
	VSpecDerivation_Impl | ChoiceDerivation | VariableDerivation | CVSpecDerivation
;

VSpec returns VSpec:
	Choice | VClassifier | Variable | CVSpec
;

VSpecResolution returns VSpecResolution:
	ChoiceResolutuion | VInstance | VariableValueAssignment | VConfiguration
;

VariationPoint returns VariationPoint:
	FragmentSubstitution | PlacementFragment | ObjectSubstitution | SlotAssignment | ObjectExistence | LinkAssignment | ConfigurableUnit | CompositeVariationPoint_Impl | LinkExistence | OpaqueVariationPoint | SlotValueExistence | ParametricLinkAssignment | ParametricObjectSubstitution | ParametricSlotAssignmet | ConfigurableUnitUsage | PatternIntegration | PatternFusion | StructuralOrganisationalPattern
;

BoundaryElementBinding returns BoundaryElementBinding:
	ToBinding | FromBinding
;

PlacementBoundaryElement returns PlacementBoundaryElement:
	ToPlacement | FromPlacement
;

ReplacementBoundaryElement returns ReplacementBoundaryElement:
	ToReplacement | FromReplacement
;

ValueSpecification returns ValueSpecification:
	ObjectSpecification | ReplacementFragmentSpecification | PrimitiveValueSpecification
;

Variabletype returns Variabletype:
	ReplacementFragmentType | PrimitveType | ObjectType
;

Constraint returns Constraint:
	Constraint_Impl | OpaqueConstraint | OCLConstraint
;

BaseModelHandle returns BaseModelHandle:
	ObjectHandle | LinkHandle
;

OCLExpression returns OCLExpression:
	OCLExpression_Impl | VSpecRef | OperationCallExp | BooleanLiteralExp | StringLiteralExp | NumericLiteralExp_Impl | IntegerLiteralExp | UnlimitedLiteralExp | RealLiteralExp
;

Choice returns Choice:
	'Choice' name = ID  (groupMultiplicity = MultiplicityInterval)?
	('{'
		(defaultResolution ?= 'default')?
		(isImpliedByParent ?= 'implied')?
		('resolutionTime' resolutionTime = STRING)?
		('derivation' ownedVSpecDerivation = VSpecDerivation)?
		(child += VSpec (child += VSpec)*)?
	'}')?
;

VSpecDerivation_Impl returns VSpecDerivation:
	'VSpecDerivation' name = ID 'for' derivedVSpec = [VSpec | ID]
;

VClassifier returns VClassifier:
	'VClassifier' name = ID (groupMultiplicity = MultiplicityInterval)? '{'
		('resolutionTime' resolutionTime = STRING)?
		('derivation' ownedVSpecDerivation = VSpecDerivation)?
		'instanceMultiplicity' instanceMultiplicity = MultiplicityInterval
		(child += VSpec (child += VSpec)*)?
	'}'
;

ChoiceResolutuion returns ChoiceResolutuion:
	ComplexChoiceResolution | SimpleChoiceResolution
;

ComplexChoiceResolution returns ChoiceResolutuion:
	'ChoiceResolution' name = ID '=' decision = BOOLEAN 'for' resolvedChoice = [Choice | ID]
	('{'
		child += VSpecResolution (child += VSpecResolution)*
	'}')?
;

SimpleChoiceResolution returns ChoiceResolutuion:
	'resolution' 'for' resolvedChoice = [Choice | ID] '=' decision = BOOLEAN 
;

VInstance returns VInstance:
	'VInstance' name = ID '{'
		'resolvedVSpec' resolvedVSpec = [VSpec]
		'type' type = [VClassifier]
		(child += VSpecResolution (child += VSpecResolution)*)?
	'}'
;

FragmentSubstitution returns FragmentSubstitution:
	'FragmentSubstitution' name = ID (multi ?= '[*]') '{'
		('mapping' mappingExpression = STRING)?
		('expression' expression = STRING)?
		('bindingVspec' bindingVspec += [VSpec] (',' bindingVspec += [VSpec])*)?
		('precedence' precedenceConstraint += [VariationPoint] (precedenceConstraint += [VariationPoint])*)?
		('choice' bindingChoice += [Choice] (',' bindingChoice += [Choice])*)?
		'bindingClassifier' bindingClassifier = [VClassifier]
		'placement' placement = [PlacementFragment]
		('replacement' replacement = [ReplacementFragmentType])?
		(
			'boundaryElementBindings' '{'
				(boundaryElementBinding += BoundaryElementBinding)*
			'}'
		)?
	'}'
;

PlacementFragment returns PlacementFragment:
	'PlacementFragment' name = ID '{'
		('bindingVspec' bindingVspec += [VSpec] (',' bindingVspec += [VSpec])*)?
		('precedenceConstraint' '(' precedenceConstraint += [VariationPoint] (',' precedenceConstraint += [VariationPoint])*)?
		(
			'placementBoundaryElements' '{'
				(placementBoundaryElement += PlacementBoundaryElement)*
			'}'
		)?
	'}'
;

ReplacementFragmentType returns ReplacementFragmentType:
	'ReplacementFragmentType' name = ID '{'
		(
			'replacementBoundaryElements' '{'
				(replacementBoundaryElement += ReplacementBoundaryElement)*
			'}'
		)?
		(
			'placementFragments' '{'
				(placementFragment += PlacementFragment)*
			'}'
		)?
	'}'
;

ObjectSubstitution:
	CvlObjectSubstitution | PatternRoleBinding
;

CvlObjectSubstitution returns ObjectSubstitution:
	'ObjectSubstitution' name = ID '{'
		('mapping' mappingExpression = STRING)?
		('expression' expression = STRING)?
		('bindingVspec' bindingVspec += [VSpec] (',' bindingVspec += [VSpec])*)?
		('precedence' precedenceConstraint += [VariationPoint] (',' precedenceConstraint += [VariationPoint])*)?
		'placement' placementObject = ObjectHandle
		'replacement' replacementObject = ObjectHandle
		('choice' bindingChoice += [Choice] (',' bindingChoice += [Choice])*)?
	'}'
;

PatternRoleBinding returns ObjectSubstitution:
	'RoleBinding' name = ID '{'
		'role' placementObject = ObjectHandle
		'target' replacementObject = ObjectHandle
	'}'
;

Variable:
	SimpleVariable | ComplexVariable
;

SimpleVariable returns Variable:
	name = ID ':' type = [Variabletype]
;

ComplexVariable returns Variable:
	'Variable' name = ID '{'
		('resolutionTime' resolutionTime = STRING)?
		('replacementFragmentTypesubsetstype' replacementFragmentTypesubsetstype = [ReplacementFragmentType])?
		'type' type = [Variabletype]
		('groupMultiplicity' groupMultiplicity = MultiplicityInterval)?
		('ownedVSpecDerivation' ownedVSpecDerivation = VSpecDerivation)?
		('defaultValue' defaulValue = ValueSpecification)?
		(child += VSpec (child += VSpec)*)?
	'}'
;

VariableValueAssignment:
	SimpleVariableValueAssignment | ComplexVariableValueAssignment
;

SimpleVariableValueAssignment returns VariableValueAssignment:
	'VariableValueAssignment' resolvedVariable = [Variable] '=' value = ValueSpecification
;

ComplexVariableValueAssignment returns VariableValueAssignment:
	'VariableValueAssignment' name = ID '{'
		'resolvedVSpec' resolvedVSpec = [VSpec]
		'resolvedVariable' resolvedVariable = [Variable]
		'value' value = ValueSpecification
		(child += VSpecResolution (child += VSpecResolution)*)?
	'}'
;

PrimitveType returns PrimitveType:
	'PrimitiveType' name = ID ':' type = PrimitiveTypeEnum
;

ObjectType returns ObjectType:
	'ObjectType' name = ID '{'
		'metaClass' metaClass = STRING
	'}'
;

VInterface returns VInterface:
	'VInterface' name = ID '{'
		('super' super = [VInterface])?
		(
			'constraints' '{'
				(ownedConstraint += Constraint)*
			'}'
		)?
		(
			'member' '{'
				(member += VSpec)*
			'}'
		)?
	'}'
;

Constraint_Impl returns Constraint:
	'Constraint' name = ID '{'
		('context' context = [VSpec])?
	'}'
;

SlotAssignment returns SlotAssignment:
	'SlotAssignment' name = ID '{'
		('mapping' mappingExpression = STRING)?
		('expression' expression = STRING)?
		('bindingVspec' bindingVspec += [VSpec] (',' bindingVspec+=[VSpec])*)?
		('precedence' precedenceConstraint += [VariationPoint] (',' precedenceConstraint += [VariationPoint])*)?
		'slotOwner' SlotOwner = ObjectHandle
		'slotIdentifier' slotIdentifier = STRING
		('value' value = ValueSpecification)?
		('choice' bindingChoice += [Choice] (',' bindingChoice += [Choice])*)?
	'}'
;

ObjectExistence returns ObjectExistence:
	'ObjectExistence' name = ID	'{'
		('mapping' mappingExpression = STRING)?
		('expression' expression = STRING)?
		('bindingVspec' bindingVspec += [VSpec] (',' bindingVspec += [VSpec])*)?
		('precedence' precedenceConstraint += [VariationPoint] (',' precedenceConstraint += [VariationPoint])*)?
		('choice' bindingChoice += [Choice] (',' bindingChoice += [Choice])*)?
		('object' optionalObject += ObjectHandle)*
		('choice' bindingChoice += [Choice] (',' bindingChoice += [Choice])*)?
	'}'
;

LinkAssignment returns LinkAssignment:
	'LinkAssignment' name = ID '{'
		('mapping' mappingExpression = STRING)?
		('expression' expression = STRING)?
		('bindingVspec' bindingVspec += [VSpec] (',' bindingVspec += [VSpec])*)?
		('precedence' precedenceConstraint += [VariationPoint] (',' precedenceConstraint += [VariationPoint])*)?
		'link' link = LinkHandle
		'linkEndIdentifier' linkEndIdentifier = STRING
		'newEnd' newEnd = ObjectHandle
		('choice' bindingChoice += [Choice] (',' bindingChoice += [Choice])*)?
	'}'
;

ConfigurableUnit returns ConfigurableUnit:
	'ConfigurableUnit' name = ID '{'
		('bindingVspec' bindingVspec += [VSpec] (',' bindingVspec += [VSpec])*)?
		('precedence' precedenceConstraint += [VariationPoint] (',' precedenceConstraint += [VariationPoint])*)?
		'bindingCVSpec' bindingCVSpec = [CVSpec]
		'unitInterface' unitInterface = [VInterface]
		(
			'children' '{'
				(children += VariationPoint)*
			'}'
		)?
		(
			'ownedVSpec' '{'
				(ownedVSpec += VSpec)*
			'}'
		)?
		(
			'ownedVariationPoint' '{'
				(ownedVariationPoint += VariationPoint)*
			'}'
		)?
		(
			'ownedConstraint' '{'
				(ownedConstraint += Constraint)*
			'}'
		)?
		(
			'ownedVSpecResolution' '{'
				(ownedVSpecResolution += VSpecResolution)*
			'}'
		)?
		'configurableContainerObject' configurableContainerObject = ObjectHandle
	'}'
;

CompositeVariationPoint_Impl returns CompositeVariationPoint:
	'CompositeVariationPoint' name = ID '{'
		('bindingVspec' bindingVspec += [VSpec] (',' bindingVspec += [VSpec])*)?
		('precedence' precedenceConstraint += [VariationPoint] (',' precedenceConstraint += [VariationPoint])*)?
		'bindingCVSpec' bindingCVSpec = [CVSpec]
		(
			'children' '{'
				(children += VariationPoint)*
			'}'
		)?
	'}'
;

CVSpec returns CVSpec:
	'CVSpec' name = ID '{'
		'resolutionTime' resolutionTime = STRING
		'extension' extension = [VInterface]
		('groupMultiplicity' groupMultiplicity = MultiplicityInterval)?
		('ownedVSpecDerivation' ownedVSpecDerivation = VSpecDerivation)?
		(
			'child' '{'
				(child += VSpec)*
			'}'
		)?
	'}'
;

VConfiguration returns VConfiguration:
	isPartial?='isPartial'
	'VConfiguration'
	name=STRING
	'{'
		'resolvedVSpec' resolvedVSpec=[VSpec]
		('super' super=[VConfiguration])?
		'resolvedVIRef' resolvedVIRef=[CVSpec]
		(
			'member' '{'
				(member += VSpecResolution)*
			'}'
		)
		(
			'child' '{'
				(child += VSpecResolution)*
			'}'
		)?
	'}'
;

OpaqueConstraint returns OpaqueConstraint:
	'OpaqueConstraint' name = ID '{'
		'constraint' constraint = STRING
		'constraintLanguage' constraintLanguage = STRING
		('context' context = [VSpec])?
	'}'
;

LinkExistence returns LinkExistence:
	'LinkExistence'	name = ID '{'
		('mapping' mappingExpression = STRING)?
		('expression' expression = STRING)?
		('bindingVspec' bindingVspec += [VSpec] (',' bindingVspec += [VSpec])*)?
		('precedence' precedenceConstraint += [VariationPoint] (',' precedenceConstraint += [VariationPoint])*)?
		'link' optionalLink = LinkHandle
		('choice' bindingChoice += [Choice] (',' bindingChoice += [Choice])*)?
	'}'
;

OpaqueVariationPoint returns OpaqueVariationPoint:
	'OpaqueVariationPoint' name = ID '{'
		('mapping' mappingExpression = STRING)?
		('expression' expression = STRING)?
		('bindingVspec' bindingVspec += [VSpec] (',' bindingVspec += [VSpec])*)?
		('precedence' precedenceConstraint += [VariationPoint] (',' precedenceConstraint += [VariationPoint])*)?
		('choice' bindingChoice += [Choice] (',' bindingChoice += [Choice])*)?
		'type' type=[OVPType]
		'placeHolder' placeHolder = BaseModelHandle
		('sourceObject' sourceObject += ObjectHandle)*
	'}'
;

OVPType returns OVPType:
	'OVPType' name = ID '{'
		'spec' spec = OVPSemanticSpec
	'}'
;

SlotValueExistence returns SlotValueExistence:
	'SlotValueExistence' name = ID '{'
		('mapping' mappingExpression = STRING)?
		('expression' expression = STRING)?
		('bindingVspec' bindingVspec += [VSpec] (',' bindingVspec += [VSpec])*)?
		('precedence' precedenceConstraint += [VariationPoint] (',' precedenceConstraint += [VariationPoint])*)?
		'slotOwner' slotOwner = ObjectHandle
		'slotIdentifier' slotIdentifier = STRING
		('choice' bindingChoice += [Choice] (',' bindingChoice += [Choice])*)?
	'}'
;

ParametricLinkAssignment returns ParametricLinkAssignment:
	'ParametricLinkAssignment' name=ID '{'
		'linkEndIdentifier' linkEndIdentifier = STRING
		('bindingVspec' bindingVspec += [VSpec] (',' bindingVspec += [VSpec])*)?
		('precedence' precedenceConstraint += [VariationPoint] (',' precedenceConstraint += [VariationPoint])*)?
		'bindingVariable' bindingVariable = [Variable]
		'link' link = LinkHandle
	'}'
;

ParametricObjectSubstitution returns ParametricObjectSubstitution:
	'ParametricObjectSubstitution' name = STRING '{'
		('bindingVspec' bindingVspec += [VSpec] (',' bindingVspec += [VSpec])*)?
		('precedence' precedenceConstraint += [VariationPoint] (',' precedenceConstraint += [VariationPoint])*)?
		'bindingVariable' bindingVariable = [Variable]
		'placementObject' placementObject = ObjectHandle
	'}'
;

ParametricSlotAssignmet returns ParametricSlotAssignmet:
	'ParametricSlotAssignmet' name = ID '{'
		('bindingVspec' bindingVspec += [VSpec] (',' bindingVspec += [VSpec])* )?
		('precedenceConstraint' precedenceConstraint += [VariationPoint] (',' precedenceConstraint += [VariationPoint])*)?
		'slotOwner' slotOwner = ObjectHandle
		'slotIdentifier' slotIdentifier = STRING
		'bindingVariable' bindingVariable = [Variable]
	'}'
;

ChoiceDerivation returns ChoiceDerivation:
	'ChoiceDerivation' name = ID '{'
		'derivedVSpec' derivedVSpec = [VSpec]
		'derivingConstraint' derivingConstraint = Constraint
	'}'
;

VariableDerivation returns VariableDerivation:
	'VariableDerivation' name = ID '{'
		'derivedVSpec' derivedVSpec = [VSpec]
		'derivingExpression' derivingExpression = OCLExpression
	'}'
;

CVSpecDerivation returns CVSpecDerivation:
	'CVSpecDerivation' name = STRING '{'
		'derivedVSpec' derivedVSpec = [VSpec]
		(
			'memberDerivation' '{'
				(memberDerivation += VSpecDerivation)*
			'}'
		)?
	'}'
;

ConfigurableUnitUsage returns ConfigurableUnitUsage:
	'ConfigurableUnitUsage' name = STRING '{'
		'linkEndIdentifier' linkEndIdentifier = STRING
		('bindingVspec' bindingVspec += [VSpec] (',' bindingVspec += [VSpec])*)?
		('precedence' '(' precedenceConstraint += [VariationPoint] (',' precedenceConstraint += [VariationPoint])*)?
		'bindingCVSpec' bindingCVSpec = [CVSpec]
		'usedUnit' usedUnit = [ConfigurableUnit]
		'usageReference' usageReference = LinkHandle
		(
			'children' '{'
				(children += VariationPoint)*
			'}'
		)
	'}'
;

OCLConstraint:
	SimpleOCLConstraint | ComplexOCLConstraint
;

ComplexOCLConstraint returns OCLConstraint:
	'constraint' name = ID '{'
		('context' context = [VSpec])?
		('expression' expression += OCLExpression)*
	'}'
;

SimpleOCLConstraint returns OCLConstraint:
	'constraint' expression += OCLExpression 'on' context = [VSpec]
;

PatternIntegration returns PatternIntegration:
	'PatternIntegration' name = ID (multi ?= '[*]')? '{'
		('mapping' mappingExpression = STRING)?
		('expression' expression = STRING)?
		('bindingVspec' bindingVspec += [VSpec] (',' bindingVspec += [VSpec])*)?
		('precedence' precedenceConstraint += [VariationPoint] (',' precedenceConstraint += [VariationPoint])*)?
		('classifier' bindingClassifier = [VClassifier])?
		('bindings' substitutes += [ObjectSubstitution] (',' substitutes += [ObjectSubstitution])*)?
		('choice' bindingChoice += [Choice] (',' bindingChoice += [Choice])*)?
	'}'
;

PatternFusion returns PatternFusion:
	'PatternFusion' name = ID (multi ?= '[*]')? '{'
		('mapping' mappingExpression = STRING)?
		('expression' expression = STRING)?
		('bindingVspec' bindingVspec += [VSpec] (',' bindingVspec += [VSpec])*)?
		('precedence' precedenceConstraint += [VariationPoint] (',' precedenceConstraint += [VariationPoint])*)?
		('classifier' bindingClassifier = [VClassifier])?
		('bindings' substitutes += [ObjectSubstitution] (',' substitutes += [ObjectSubstitution])*)?
		('choice' bindingChoice += [Choice] (',' bindingChoice += [Choice])*)?
	'}'
;

StructuralOrganisationalPattern returns StructuralOrganisationalPattern:
	'StructuralOrganisationalPattern' name = ID (multi ?= '[*]')? '{'
		('mapping' mappingExpression = STRING)?
		('expression' expression = STRING)?
		('bindingVspec' bindingVspec += [VSpec] (',' bindingVspec += [VSpec])*)?
		('precedence' precedenceConstraint += [VariationPoint] (',' precedenceConstraint += [VariationPoint])*)?
		('classifier' bindingClassifier = [VClassifier])?
		('bindings' substitutes += [ObjectSubstitution] (',' substitutes += [ObjectSubstitution])*)?
		('choice' bindingChoice += [Choice] (',' bindingChoice += [Choice])*)?
	'}'
;

MultiplicityInterval returns MultiplicityInterval:
	'[' lower = INT '..' upper = INT ']'
;

BOOLEAN returns ecore::EBoolean:
	'true' | 'false'
;

ToBinding returns ToBinding:
	'ToBinding'
	'{'
		'toPlacement' toPlacement = [ToPlacement]
		'toReplacement' toReplacement = [ToReplacement]
	'}'
;

FromBinding returns FromBinding:
	'FromBinding'
	'{'
		'fromPlacement' fromPlacement = [FromPlacement]
		'fromReplacement' fromReplacement = [FromReplacement]
	'}'
;

ToPlacement returns ToPlacement:
	'ToPlacement'
	'{'
		'propertyName' propertyName = ID
		(
			'insideBoundaryElement' '{'
				(insideBoundaryElement += ObjectHandle)*
			'}'
		)?
		('outsideBoundaryElement' outsideBoundaryElement = ObjectHandle)?
	'}'
;

ToReplacement returns ToReplacement:
	{ToReplacement}
	'ToReplacement'
	'{'
		(
			'insideBoundaryElement' '{'
				(insideBoundaryElement += ObjectHandle)*
			'}'
		)?
		('toPlacement' toPlacement = ToPlacement)?
	'}'
;

ObjectHandle returns ObjectHandle:
	SimpleObjectHandle | CompleteObjectHandle | EObjectHandle
;

SimpleObjectHandle returns ObjectHandle:
	referenceString = STRING // "X.uml#//umlID"
;

CompleteObjectHandle returns ObjectHandle:
	'(' 'mofRef' ':' MOFRef = STRING ',' 'reference' ':' referenceString = STRING ')'
;

EObjectHandle returns ObjectHandle:
	reference = [ecore::EObject | QualifiedName]
;

FromPlacement returns FromPlacement:
	{FromPlacement}
	'FromPlacement'
	'{'
		('fromReplacement' fromReplacement = [FromReplacement])?
		(
			'outsideBoundaryElement' '{'
				(outsideBoundaryElement += ObjectHandle)*
				'}'
		)?
	'}'
;

FromReplacement returns FromReplacement:
	'FromReplacement'
	'{'
		'propertyName' propertyName = STRING
		('fromPlacement' fromPlacement = [FromPlacement])?
		('insideBoundaryElement' insideBoundaryElement = ObjectHandle)?
		(
			'outsideBoundaryElement' '{'
				(outsideBoundaryElement += ObjectHandle)*
				'}'
		)?
	'}'
;

ObjectSpecification returns ObjectSpecification:
	'ObjectSpecification'
	'{'
		'type' type = [Variabletype]
		'object' object = [ObjectHandle]
	'}'
;

ReplacementFragmentSpecification returns ReplacementFragmentSpecification:
	'ReplacementFragmentSpecification'
	'{'
		'type' type = [Variabletype]
	'}'
;

PrimitiveValueSpecification:
	SimplePrimitiveValueSpecification | ComplexPrimitiveValueSpecification
;

SimplePrimitiveValueSpecification returns PrimitiveValueSpecification:
	value = STRING
;

ComplexPrimitiveValueSpecification returns PrimitiveValueSpecification:
	'PrimitiveValueSpecification'
	'{'
		('value' value = STRING)?
		'type' type = [Variabletype]
		'expression' expression = OCLExpression
	'}'
;

OCLExpression_Impl returns OCLExpression:
	{OCLExpression}
	'OCLExpression'
;

VSpecRef returns VSpecRef:
	vSpec = [VSpec]
;

OperationCallExp returns OperationCallExp:
	operation = Operation '(' (argument += OCLExpression (',' argument += OCLExpression)*)? ')'
;

BooleanLiteralExp returns BooleanLiteralExp:
	bool ?= 'bool'
	'BooleanLiteralExp'
;

StringLiteralExp returns StringLiteralExp:
	'StringLiteralExp'
	'{'
		'string' string = STRING
	'}'
;

NumericLiteralExp_Impl returns NumericLiteralExp:
	{NumericLiteralExp}
	'NumericLiteralExp'
;

IntegerLiteralExp returns IntegerLiteralExp:
	'IntegerLiteralExp'
	'{'
		'integer' integer = INT
	'}'
;

UnlimitedLiteralExp returns UnlimitedLiteralExp:
	'UnlimitedLiteralExp'
	'{'
		'unlimited' unlimited = INT
	'}'
;

RealLiteralExp returns RealLiteralExp:
	'RealLiteralExp'
	'{'
		'real' real = EDouble
	'}'
;

enum Operation returns Operation:
	logNot = 'not' | logAnd = 'and' | logOr = 'or' | logImplies = 'implies' | logXor = 'xor' | logIff = 'iff' | arithPlus = 'plus' | arithMinus = 'minus' | arithNeg = 'neg' | arithMult = 'mult' | arithDev = 'dev' | strConc = 'strConc' | eq = 'eq' | lte = 'lte' | gte = 'gte' | lt = 'lt' | gt = 'gt' | isDefined = 'isDefined' | isUndefined = 'isUndefined'
;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?
;

enum PrimitiveTypeEnum returns PrimitiveTypeEnum:
				String = 'String' | Boolean = 'Boolean' | Integer = 'Integer' | Real = 'Real' | UnlimitedNatural = 'UnlimitedNatural'
;

LinkHandle returns LinkHandle:
	SimpleLinkHandle | CompleteLinkHandle | EObjectLinkHandle
;

SimpleLinkHandle returns LinkHandle:
	referenceString = STRING
;

CompleteLinkHandle returns LinkHandle:
	'(' 'linkMofRef' ':' MOFRef = STRING ',' 'reference' ':' referenceString = STRING ')'
;

EObjectLinkHandle returns LinkHandle:
	reference = [ecore::EObject | QualifiedName]
;

BaseModelHandle_Impl returns BaseModelHandle:
	{BaseModelHandle}
	'BaseModelHandle'
	'{'
		('reference' reference = [ecore::EObject |STRING])?
	'}'
;

OVPSemanticSpec returns OVPSemanticSpec:
	'OVPSemanticSpec'
	'{'
		'modelTransformation' modelTransformation = STRING
		'transfromationLanguage' transfromationLanguage = STRING
	'}'
;
