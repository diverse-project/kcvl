/*
 * generated by Xtext 2.10.0
 */
package fr.inria.diverse.kcvl

import fr.inria.diverse.kcvl.scoping.KCvlPostProcessor
import fr.inria.diverse.kcvl.scoping.KcvlGlobalScopeProvider
import org.eclipse.xtext.scoping.IScopeProvider
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.eclipse.xtext.scoping.impl.SimpleLocalScopeProvider

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
class KCVLRuntimeModule extends AbstractKCVLRuntimeModule {
	
	override def bindIDerivedStateComputer()
	{
		return typeof(KCvlPostProcessor)
	} 
	
	override def bindIGlobalScopeProvider() {
		return typeof(KcvlGlobalScopeProvider)
	}
	
/* 	override def configureIScopeProviderDelegate(com.google.inject.Binder binder) {
		binder.bind(typeof(IScopeProvider)).annotatedWith(com.google.inject.name.Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE)).to(typeof(SimpleLocalScopeProvider));
	}*/

	// contributed by org.eclipse.xtext.generator.scoping.AbstractScopingFragment
	/*override def Class<? extends org.eclipse.xtext.scoping.IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return org.eclipse.xtext.scoping.impl.ImportUriGlobalScopeProvider.class;
	}*/

// contributed by org.eclipse.xtext.generator.exporting.SimpleNamesFragment
	override def  Class<? extends org.eclipse.xtext.naming.IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return typeof(org.eclipse.xtext.naming.SimpleNameProvider);
	}
}
  