module org.eclipse.capella.vp.kcvl.GenerateKCVL

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."

Workflow {
	
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "org.eclipse.capella.vp.kcvl"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = false
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = StandardLanguage {
			name = "org.eclipse.capella.vp.kcvl.KCVL"
			fileExtensions = "kcvl"
			referencedResource = "platform:/resource/org.eclipse.capella.vp.kcvl.metamodel/model/CVLMetamodel.genmodel"
			
			fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment2 auto-inject {}

			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				fragment = org.eclipse.xtext.generator.ecore2xtext.FormatterFragment {}
			}

			    fragment = grammarAccess.GrammarAccessFragment2 {
			    	
			    	
			    }
    fragment = ecore.EMFGeneratorFragment2 {
    	
    }
    fragment = serializer.SerializerFragment2 {
            	generateStub = true
            	generateXtendStub = true
            	    	
    }
    fragment = validation.ValidatorFragment2 {
    	composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
    	
    	
    }
    fragment = scoping.ImportNamespacesScopingFragment2 {}
    
//    fragment = exporting.QualifiedNamesFragment2 {}
    
          //  fragment = scoping.ImportURIScopingFragment {}
            fragment = exporting.SimpleNamesFragment2 {}
    
    fragment = builder.BuilderIntegrationFragment2 {}
    fragment = generator.GeneratorFragment2 {
    	    generateMwe = false
            generateJavaMain = false
    }
    fragment = formatting.Formatter2Fragment2 {}
    fragment = ui.labeling.LabelProviderFragment2 {}
    fragment = ui.outline.OutlineTreeProviderFragment2 {}
    fragment = ui.outline.QuickOutlineFragment2 {}
    fragment = ui.quickfix.QuickfixProviderFragment2 {}
    fragment = ui.contentAssist.ContentAssistFragment2 {}
   //fragment = junit.Junit4Fragment2 {}
   // fragment = types.TypesGeneratorFragment2 {}
    fragment = ui.templates.CodetemplatesGeneratorFragment2 {}
    fragment = ui.compare.CompareFragment2 {
    	
    }

		}
	}
}
