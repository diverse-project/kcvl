/*
* generated by Xtext
*/
grammar InternalCvlmappingvaribilitychoice;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.varymde.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.varymde.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.varymde.services.CvlmappingvaribilitychoiceGrammarAccess;

}

@parser::members {

 	private CvlmappingvaribilitychoiceGrammarAccess grammarAccess;
 	
    public InternalCvlmappingvaribilitychoiceParser(TokenStream input, CvlmappingvaribilitychoiceGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "RestrictionRuleset";	
   	}
   	
   	@Override
   	protected CvlmappingvaribilitychoiceGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRestrictionRuleset
entryRuleRestrictionRuleset returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRestrictionRulesetRule()); }
	 iv_ruleRestrictionRuleset=ruleRestrictionRuleset 
	 { $current=$iv_ruleRestrictionRuleset.current; } 
	 EOF 
;

// Rule RestrictionRuleset
ruleRestrictionRuleset returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRestrictionRulesetAccess().getCvlmodelEStringParserRuleCall_0_0()); 
	    }
		lv_cvlmodel_0_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRestrictionRulesetRule());
	        }
       		set(
       			$current, 
       			"cvlmodel",
        		lv_cvlmodel_0_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRestrictionRulesetAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getRestrictionRulesetAccess().getRuleRestrictionRuleParserRuleCall_2_0_0()); 
	    }
		lv_rule_2_0=ruleRestrictionRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRestrictionRulesetRule());
	        }
       		add(
       			$current, 
       			"rule",
        		lv_rule_2_0, 
        		"RestrictionRule");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRestrictionRulesetAccess().getRuleRestrictionRuleParserRuleCall_2_1_0()); 
	    }
		lv_rule_3_0=ruleRestrictionRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRestrictionRulesetRule());
	        }
       		add(
       			$current, 
       			"rule",
        		lv_rule_3_0, 
        		"RestrictionRule");
	        afterParserOrEnumRuleCall();
	    }

)
)*)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRestrictionRulesetAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleRestrictionRule
entryRuleRestrictionRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRestrictionRuleRule()); }
	 iv_ruleRestrictionRule=ruleRestrictionRule 
	 { $current=$iv_ruleRestrictionRule.current; } 
	 EOF 
;

// Rule RestrictionRule
ruleRestrictionRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRestrictionRuleAccess().getNameEStringParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRestrictionRuleRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRestrictionRuleAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRestrictionRuleAccess().getExpressionBinExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleBinExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRestrictionRuleRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"BinExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRestrictionRuleAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleBinExpression
entryRuleBinExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinExpressionRule()); }
	 iv_ruleBinExpression=ruleBinExpression 
	 { $current=$iv_ruleBinExpression.current; } 
	 EOF 
;

// Rule BinExpression
ruleBinExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBinExpressionAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBinExpressionAccess().getBinExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinExpressionAccess().getOpOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinExpressionAccess().getRightPrimaryExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getUnaryExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getOpUnaryOperatorEnumRuleCall_0_1_0()); 
	    }
		lv_op_1_0=ruleUnaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"UnaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLeftHasChoiceParserRuleCall_0_2_0()); 
	    }
		lv_left_2_0=ruleHasChoice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_2_0, 
        		"HasChoice");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getUnaryExpressionAction_1_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getOpUnaryOperatorEnumRuleCall_1_0_1_0()); 
	    }
		lv_op_4_0=ruleUnaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_4_0, 
        		"UnaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLeftBinExpressionParserRuleCall_1_0_3_0()); 
	    }
		lv_left_6_0=ruleBinExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_6_0, 
        		"BinExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_1());
    }
)
    |(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getUnaryExpressionAction_2_0_0(),
            $current);
    }
)	otherlv_9='(' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLeftBinExpressionParserRuleCall_2_0_2_0()); 
	    }
		lv_left_10_0=ruleBinExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_10_0, 
        		"BinExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_1());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getHasChoiceParserRuleCall_3()); 
    }
    this_HasChoice_12=ruleHasChoice
    { 
        $current = $this_HasChoice_12.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleHasChoice
entryRuleHasChoice returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHasChoiceRule()); }
	 iv_ruleHasChoice=ruleHasChoice 
	 { $current=$iv_ruleHasChoice.current; } 
	 EOF 
;

// Rule HasChoice
ruleHasChoice returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='HasChoice' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getHasChoiceAccess().getHasChoiceKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHasChoiceAccess().getChoiceNameEStringParserRuleCall_1_0()); 
	    }
		lv_choiceName_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHasChoiceRule());
	        }
       		set(
       			$current, 
       			"choiceName",
        		lv_choiceName_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='where' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getHasChoiceAccess().getWhereKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHasChoiceAccess().getConditionConditionParserRuleCall_2_1_0()); 
	    }
		lv_condition_3_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHasChoiceRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_3_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current; } 
	 EOF 
;

// Rule Condition
ruleCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getConditionAccess().getConditionExpressionParserRuleCall()); 
    }
    this_ConditionExpression_0=ruleConditionExpression
    { 
        $current = $this_ConditionExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleValue
entryRuleValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); } 
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current.getText(); }  
	 EOF 
;

// Rule Value
ruleValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getValueAccess().getIDTerminalRuleCall_1()); 
    }

    |    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getValueAccess().getINTTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleConditionExpression
entryRuleConditionExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionExpressionRule()); }
	 iv_ruleConditionExpression=ruleConditionExpression 
	 { $current=$iv_ruleConditionExpression.current; } 
	 EOF 
;

// Rule ConditionExpression
ruleConditionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConditionExpressionAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionExpressionAccess().getFeatureAttibuteNameEStringParserRuleCall_1_0()); 
	    }
		lv_featureAttibuteName_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionExpressionRule());
	        }
       		set(
       			$current, 
       			"featureAttibuteName",
        		lv_featureAttibuteName_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionExpressionAccess().getOpCompareOperatorEnumRuleCall_2_0()); 
	    }
		lv_op_2_0=ruleCompareOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"CompareOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionExpressionAccess().getValueValueParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConditionExpressionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Rule Operator
ruleOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='or' 
	{
        $current = grammarAccess.getOperatorAccess().getOrEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOperatorAccess().getOrEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='and' 
	{
        $current = grammarAccess.getOperatorAccess().getAndEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOperatorAccess().getAndEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='xor' 
	{
        $current = grammarAccess.getOperatorAccess().getXorEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getOperatorAccess().getXorEnumLiteralDeclaration_2()); 
    }
));



// Rule UnaryOperator
ruleUnaryOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='!' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration()); 
    }
);



// Rule CompareOperator
ruleCompareOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='>' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getSupEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCompareOperatorAccess().getSupEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='>=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getSupeqEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCompareOperatorAccess().getSupeqEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='<' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getInfEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCompareOperatorAccess().getInfEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='<=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getInfeqEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getCompareOperatorAccess().getInfeqEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getEqEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getCompareOperatorAccess().getEqEnumLiteralDeclaration_4()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


