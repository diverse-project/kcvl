// automatically generated by Xtext
grammar org.varymde.Cvlmappingvaribilitychoice with org.eclipse.xtext.common.Terminals 

import "platform:/resource/org.eclipse.capella.vp.kcvl.fd2assets/model/FD2Assets.ecore" 

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

RestrictionRuleset returns RestrictionRuleset:
	cvlmodel = EString
	'{'
		(rule+=RestrictionRule ( rule+=RestrictionRule)* )
		
    '}';


RestrictionRule returns RestrictionRule:
	name=EString
	':'
		expression=BinExpression
    ';';

BinExpression returns Expression:
	PrimaryExpression ({BinExpression.left=current} 
    op= Operator
    right=PrimaryExpression)*;
    
    

/*BinExpression returns Expression:
    PrimaryExpression ({BinExpression.left=current} 
    op= Operator
    right=PrimaryExpression)*;*/

PrimaryExpression returns Expression:
     ({UnaryExpression} op=UnaryOperator left=HasChoice) |   
    ({UnaryExpression} op=UnaryOperator '(' left=BinExpression) ')' |
    ({UnaryExpression} '(' left=BinExpression) ')' |
    HasChoice ;

HasChoice returns HasChoice:
	'HasChoice'
	
		choiceName=EString
		('where' condition=Condition)?
    ;
	
Condition returns Condition:
	//ConditionExpression | BinCondition;
	ConditionExpression ;

EString returns ecore::EString:
	STRING | ID;


Value returns ecore::EString:
	STRING | ID|INT;




enum Operator returns Operator:
	Or = 'or' | And = 'and' | Xor = 'xor';

enum UnaryOperator returns UnaryOperator:
	Not = '!';

	
ConditionExpression returns ConditionExpression:
	'('
		featureAttibuteName=EString
		op=CompareOperator
		value=Value
    ')';

/*BinCondition returns BinCondition:
	'('
		left=BinCondition
		op=Operator
		right=Condition
    ')';
*/
enum CompareOperator returns CompareOperator:
	sup = '>' | supeq = '>=' | inf = '<' | infeq = '<=' | eq = '=';

	