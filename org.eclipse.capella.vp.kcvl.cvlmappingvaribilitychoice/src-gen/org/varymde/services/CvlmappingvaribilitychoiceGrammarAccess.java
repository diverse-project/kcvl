/*
* generated by Xtext
*/

package org.varymde.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CvlmappingvaribilitychoiceGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RestrictionRulesetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RestrictionRuleset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCvlmodelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCvlmodelEStringParserRuleCall_0_0 = (RuleCall)cCvlmodelAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRuleAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cRuleRestrictionRuleParserRuleCall_2_0_0 = (RuleCall)cRuleAssignment_2_0.eContents().get(0);
		private final Assignment cRuleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRuleRestrictionRuleParserRuleCall_2_1_0 = (RuleCall)cRuleAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RestrictionRuleset:
		//	cvlmodel=EString "{" (rule+=RestrictionRule rule+=RestrictionRule*) "}";
		public ParserRule getRule() { return rule; }

		//cvlmodel=EString "{" (rule+=RestrictionRule rule+=RestrictionRule*) "}"
		public Group getGroup() { return cGroup; }

		//cvlmodel=EString
		public Assignment getCvlmodelAssignment_0() { return cCvlmodelAssignment_0; }

		//EString
		public RuleCall getCvlmodelEStringParserRuleCall_0_0() { return cCvlmodelEStringParserRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//rule+=RestrictionRule rule+=RestrictionRule*
		public Group getGroup_2() { return cGroup_2; }

		//rule+=RestrictionRule
		public Assignment getRuleAssignment_2_0() { return cRuleAssignment_2_0; }

		//RestrictionRule
		public RuleCall getRuleRestrictionRuleParserRuleCall_2_0_0() { return cRuleRestrictionRuleParserRuleCall_2_0_0; }

		//rule+=RestrictionRule*
		public Assignment getRuleAssignment_2_1() { return cRuleAssignment_2_1; }

		//RestrictionRule
		public RuleCall getRuleRestrictionRuleParserRuleCall_2_1_0() { return cRuleRestrictionRuleParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class RestrictionRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RestrictionRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionBinExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RestrictionRule:
		//	name=EString ":" expression=BinExpression ";";
		public ParserRule getRule() { return rule; }

		//name=EString ":" expression=BinExpression ";"
		public Group getGroup() { return cGroup; }

		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//expression=BinExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//BinExpression
		public RuleCall getExpressionBinExpressionParserRuleCall_2_0() { return cExpressionBinExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class BinExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOperatorEnumRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BinExpression returns Expression:
		//	PrimaryExpression ({BinExpression.left=current} op=Operator right=PrimaryExpression)*;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression ({BinExpression.left=current} op=Operator right=PrimaryExpression)*
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//({BinExpression.left=current} op=Operator right=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinExpression.left=current}
		public Action getBinExpressionLeftAction_1_0() { return cBinExpressionLeftAction_1_0; }

		//op=Operator
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//Operator
		public RuleCall getOpOperatorEnumRuleCall_1_1_0() { return cOpOperatorEnumRuleCall_1_1_0; }

		//right=PrimaryExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_2_0() { return cRightPrimaryExpressionParserRuleCall_1_2_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOpUnaryOperatorEnumRuleCall_0_1_0 = (RuleCall)cOpAssignment_0_1.eContents().get(0);
		private final Assignment cLeftAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cLeftHasChoiceParserRuleCall_0_2_0 = (RuleCall)cLeftAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cUnaryExpressionAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOpUnaryOperatorEnumRuleCall_1_0_1_0 = (RuleCall)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cLeftAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cLeftBinExpressionParserRuleCall_1_0_3_0 = (RuleCall)cLeftAssignment_1_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Action cUnaryExpressionAction_2_0_0 = (Action)cGroup_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cLeftAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cLeftBinExpressionParserRuleCall_2_0_2_0 = (RuleCall)cLeftAssignment_2_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cHasChoiceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		/// *BinExpression returns Expression:
		//    PrimaryExpression ({BinExpression.left=current} 
		//    op= Operator
		//    right=PrimaryExpression)*;* / PrimaryExpression returns Expression:
		//	{UnaryExpression} op=UnaryOperator left=HasChoice | ({UnaryExpression} op=UnaryOperator "(" left=BinExpression) ")" |
		//	({UnaryExpression} "(" left=BinExpression) ")" | HasChoice;
		public ParserRule getRule() { return rule; }

		//{UnaryExpression} op=UnaryOperator left=HasChoice | ({UnaryExpression} op=UnaryOperator "(" left=BinExpression) ")" |
		//({UnaryExpression} "(" left=BinExpression) ")" | HasChoice
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryExpression} op=UnaryOperator left=HasChoice
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryExpression}
		public Action getUnaryExpressionAction_0_0() { return cUnaryExpressionAction_0_0; }

		//op=UnaryOperator
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }

		//UnaryOperator
		public RuleCall getOpUnaryOperatorEnumRuleCall_0_1_0() { return cOpUnaryOperatorEnumRuleCall_0_1_0; }

		//left=HasChoice
		public Assignment getLeftAssignment_0_2() { return cLeftAssignment_0_2; }

		//HasChoice
		public RuleCall getLeftHasChoiceParserRuleCall_0_2_0() { return cLeftHasChoiceParserRuleCall_0_2_0; }

		//({UnaryExpression} op=UnaryOperator "(" left=BinExpression) ")"
		public Group getGroup_1() { return cGroup_1; }

		//{UnaryExpression} op=UnaryOperator "(" left=BinExpression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{UnaryExpression}
		public Action getUnaryExpressionAction_1_0_0() { return cUnaryExpressionAction_1_0_0; }

		//op=UnaryOperator
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//UnaryOperator
		public RuleCall getOpUnaryOperatorEnumRuleCall_1_0_1_0() { return cOpUnaryOperatorEnumRuleCall_1_0_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_2() { return cLeftParenthesisKeyword_1_0_2; }

		//left=BinExpression
		public Assignment getLeftAssignment_1_0_3() { return cLeftAssignment_1_0_3; }

		//BinExpression
		public RuleCall getLeftBinExpressionParserRuleCall_1_0_3_0() { return cLeftBinExpressionParserRuleCall_1_0_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1() { return cRightParenthesisKeyword_1_1; }

		//({UnaryExpression} "(" left=BinExpression) ")"
		public Group getGroup_2() { return cGroup_2; }

		//{UnaryExpression} "(" left=BinExpression
		public Group getGroup_2_0() { return cGroup_2_0; }

		//{UnaryExpression}
		public Action getUnaryExpressionAction_2_0_0() { return cUnaryExpressionAction_2_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0_1() { return cLeftParenthesisKeyword_2_0_1; }

		//left=BinExpression
		public Assignment getLeftAssignment_2_0_2() { return cLeftAssignment_2_0_2; }

		//BinExpression
		public RuleCall getLeftBinExpressionParserRuleCall_2_0_2_0() { return cLeftBinExpressionParserRuleCall_2_0_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_1() { return cRightParenthesisKeyword_2_1; }

		//HasChoice
		public RuleCall getHasChoiceParserRuleCall_3() { return cHasChoiceParserRuleCall_3; }
	}

	public class HasChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HasChoice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHasChoiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cChoiceNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChoiceNameEStringParserRuleCall_1_0 = (RuleCall)cChoiceNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWhereKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConditionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_2_1_0 = (RuleCall)cConditionAssignment_2_1.eContents().get(0);
		
		//HasChoice:
		//	"HasChoice" choiceName=EString ("where" condition=Condition)?;
		public ParserRule getRule() { return rule; }

		//"HasChoice" choiceName=EString ("where" condition=Condition)?
		public Group getGroup() { return cGroup; }

		//"HasChoice"
		public Keyword getHasChoiceKeyword_0() { return cHasChoiceKeyword_0; }

		//choiceName=EString
		public Assignment getChoiceNameAssignment_1() { return cChoiceNameAssignment_1; }

		//EString
		public RuleCall getChoiceNameEStringParserRuleCall_1_0() { return cChoiceNameEStringParserRuleCall_1_0; }

		//("where" condition=Condition)?
		public Group getGroup_2() { return cGroup_2; }

		//"where"
		public Keyword getWhereKeyword_2_0() { return cWhereKeyword_2_0; }

		//condition=Condition
		public Assignment getConditionAssignment_2_1() { return cConditionAssignment_2_1; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_1_0() { return cConditionConditionParserRuleCall_2_1_0; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final RuleCall cConditionExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Condition: //ConditionExpression | BinCondition;
		//	ConditionExpression;
		public ParserRule getRule() { return rule; }

		////ConditionExpression | BinCondition;
		//ConditionExpression
		public RuleCall getConditionExpressionParserRuleCall() { return cConditionExpressionParserRuleCall; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value returns ecore::EString:
		//	STRING | ID | INT;
		public ParserRule getRule() { return rule; }

		//STRING | ID | INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class ConditionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatureAttibuteNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureAttibuteNameEStringParserRuleCall_1_0 = (RuleCall)cFeatureAttibuteNameAssignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpCompareOperatorEnumRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ConditionExpression:
		//	"(" featureAttibuteName=EString op=CompareOperator value=Value ")";
		public ParserRule getRule() { return rule; }

		//"(" featureAttibuteName=EString op=CompareOperator value=Value ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//featureAttibuteName=EString
		public Assignment getFeatureAttibuteNameAssignment_1() { return cFeatureAttibuteNameAssignment_1; }

		//EString
		public RuleCall getFeatureAttibuteNameEStringParserRuleCall_1_0() { return cFeatureAttibuteNameEStringParserRuleCall_1_0; }

		//op=CompareOperator
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }

		//CompareOperator
		public RuleCall getOpCompareOperatorEnumRuleCall_2_0() { return cOpCompareOperatorEnumRuleCall_2_0; }

		//value=Value
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Value
		public RuleCall getValueValueParserRuleCall_3_0() { return cValueValueParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	public class OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOrOrKeyword_0_0 = (Keyword)cOrEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAndAndKeyword_1_0 = (Keyword)cAndEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cXorEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cXorXorKeyword_2_0 = (Keyword)cXorEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Operator:
		//	Or="or" | And="and" | Xor="xor";
		public EnumRule getRule() { return rule; }

		//Or="or" | And="and" | Xor="xor"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Or="or"
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_0() { return cOrEnumLiteralDeclaration_0; }

		//"or"
		public Keyword getOrOrKeyword_0_0() { return cOrOrKeyword_0_0; }

		//And="and"
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_1() { return cAndEnumLiteralDeclaration_1; }

		//"and"
		public Keyword getAndAndKeyword_1_0() { return cAndAndKeyword_1_0; }

		//Xor="xor"
		public EnumLiteralDeclaration getXorEnumLiteralDeclaration_2() { return cXorEnumLiteralDeclaration_2; }

		//"xor"
		public Keyword getXorXorKeyword_2_0() { return cXorXorKeyword_2_0; }
	}

	public class UnaryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperator");
		private final EnumLiteralDeclaration cNotEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNotExclamationMarkKeyword_0 = (Keyword)cNotEnumLiteralDeclaration.eContents().get(0);
		
		//enum UnaryOperator:
		//	Not="!";
		public EnumRule getRule() { return rule; }

		//Not="!"
		public EnumLiteralDeclaration getNotEnumLiteralDeclaration() { return cNotEnumLiteralDeclaration; }

		//"!"
		public Keyword getNotExclamationMarkKeyword_0() { return cNotExclamationMarkKeyword_0; }
	}

	public class CompareOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CompareOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSupEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSupGreaterThanSignKeyword_0_0 = (Keyword)cSupEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSupeqEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSupeqGreaterThanSignEqualsSignKeyword_1_0 = (Keyword)cSupeqEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInfEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInfLessThanSignKeyword_2_0 = (Keyword)cInfEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cInfeqEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cInfeqLessThanSignEqualsSignKeyword_3_0 = (Keyword)cInfeqEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEqEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEqEqualsSignKeyword_4_0 = (Keyword)cEqEnumLiteralDeclaration_4.eContents().get(0);
		
		/// *BinCondition returns BinCondition:
		//	'('
		//		left=BinCondition
		//		op=Operator
		//		right=Condition
		//    ')';
		// * / enum CompareOperator:
		//	sup=">" | supeq=">=" | inf="<" | infeq="<=" | eq="=";
		public EnumRule getRule() { return rule; }

		//sup=">" | supeq=">=" | inf="<" | infeq="<=" | eq="="
		public Alternatives getAlternatives() { return cAlternatives; }

		//sup=">"
		public EnumLiteralDeclaration getSupEnumLiteralDeclaration_0() { return cSupEnumLiteralDeclaration_0; }

		//">"
		public Keyword getSupGreaterThanSignKeyword_0_0() { return cSupGreaterThanSignKeyword_0_0; }

		//supeq=">="
		public EnumLiteralDeclaration getSupeqEnumLiteralDeclaration_1() { return cSupeqEnumLiteralDeclaration_1; }

		//">="
		public Keyword getSupeqGreaterThanSignEqualsSignKeyword_1_0() { return cSupeqGreaterThanSignEqualsSignKeyword_1_0; }

		//inf="<"
		public EnumLiteralDeclaration getInfEnumLiteralDeclaration_2() { return cInfEnumLiteralDeclaration_2; }

		//"<"
		public Keyword getInfLessThanSignKeyword_2_0() { return cInfLessThanSignKeyword_2_0; }

		//infeq="<="
		public EnumLiteralDeclaration getInfeqEnumLiteralDeclaration_3() { return cInfeqEnumLiteralDeclaration_3; }

		//"<="
		public Keyword getInfeqLessThanSignEqualsSignKeyword_3_0() { return cInfeqLessThanSignEqualsSignKeyword_3_0; }

		//eq="="
		public EnumLiteralDeclaration getEqEnumLiteralDeclaration_4() { return cEqEnumLiteralDeclaration_4; }

		//"="
		public Keyword getEqEqualsSignKeyword_4_0() { return cEqEqualsSignKeyword_4_0; }
	}
	
	private RestrictionRulesetElements pRestrictionRuleset;
	private RestrictionRuleElements pRestrictionRule;
	private BinExpressionElements pBinExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private HasChoiceElements pHasChoice;
	private ConditionElements pCondition;
	private EStringElements pEString;
	private ValueElements pValue;
	private OperatorElements unknownRuleOperator;
	private UnaryOperatorElements unknownRuleUnaryOperator;
	private ConditionExpressionElements pConditionExpression;
	private CompareOperatorElements unknownRuleCompareOperator;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public CvlmappingvaribilitychoiceGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.varymde.Cvlmappingvaribilitychoice".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RestrictionRuleset:
	//	cvlmodel=EString "{" (rule+=RestrictionRule rule+=RestrictionRule*) "}";
	public RestrictionRulesetElements getRestrictionRulesetAccess() {
		return (pRestrictionRuleset != null) ? pRestrictionRuleset : (pRestrictionRuleset = new RestrictionRulesetElements());
	}
	
	public ParserRule getRestrictionRulesetRule() {
		return getRestrictionRulesetAccess().getRule();
	}

	//RestrictionRule:
	//	name=EString ":" expression=BinExpression ";";
	public RestrictionRuleElements getRestrictionRuleAccess() {
		return (pRestrictionRule != null) ? pRestrictionRule : (pRestrictionRule = new RestrictionRuleElements());
	}
	
	public ParserRule getRestrictionRuleRule() {
		return getRestrictionRuleAccess().getRule();
	}

	//BinExpression returns Expression:
	//	PrimaryExpression ({BinExpression.left=current} op=Operator right=PrimaryExpression)*;
	public BinExpressionElements getBinExpressionAccess() {
		return (pBinExpression != null) ? pBinExpression : (pBinExpression = new BinExpressionElements());
	}
	
	public ParserRule getBinExpressionRule() {
		return getBinExpressionAccess().getRule();
	}

	/// *BinExpression returns Expression:
	//    PrimaryExpression ({BinExpression.left=current} 
	//    op= Operator
	//    right=PrimaryExpression)*;* / PrimaryExpression returns Expression:
	//	{UnaryExpression} op=UnaryOperator left=HasChoice | ({UnaryExpression} op=UnaryOperator "(" left=BinExpression) ")" |
	//	({UnaryExpression} "(" left=BinExpression) ")" | HasChoice;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//HasChoice:
	//	"HasChoice" choiceName=EString ("where" condition=Condition)?;
	public HasChoiceElements getHasChoiceAccess() {
		return (pHasChoice != null) ? pHasChoice : (pHasChoice = new HasChoiceElements());
	}
	
	public ParserRule getHasChoiceRule() {
		return getHasChoiceAccess().getRule();
	}

	//Condition: //ConditionExpression | BinCondition;
	//	ConditionExpression;
	public ConditionElements getConditionAccess() {
		return (pCondition != null) ? pCondition : (pCondition = new ConditionElements());
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//Value returns ecore::EString:
	//	STRING | ID | INT;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//enum Operator:
	//	Or="or" | And="and" | Xor="xor";
	public OperatorElements getOperatorAccess() {
		return (unknownRuleOperator != null) ? unknownRuleOperator : (unknownRuleOperator = new OperatorElements());
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//enum UnaryOperator:
	//	Not="!";
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return (unknownRuleUnaryOperator != null) ? unknownRuleUnaryOperator : (unknownRuleUnaryOperator = new UnaryOperatorElements());
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//ConditionExpression:
	//	"(" featureAttibuteName=EString op=CompareOperator value=Value ")";
	public ConditionExpressionElements getConditionExpressionAccess() {
		return (pConditionExpression != null) ? pConditionExpression : (pConditionExpression = new ConditionExpressionElements());
	}
	
	public ParserRule getConditionExpressionRule() {
		return getConditionExpressionAccess().getRule();
	}

	/// *BinCondition returns BinCondition:
	//	'('
	//		left=BinCondition
	//		op=Operator
	//		right=Condition
	//    ')';
	// * / enum CompareOperator:
	//	sup=">" | supeq=">=" | inf="<" | infeq="<=" | eq="=";
	public CompareOperatorElements getCompareOperatorAccess() {
		return (unknownRuleCompareOperator != null) ? unknownRuleCompareOperator : (unknownRuleCompareOperator = new CompareOperatorElements());
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
